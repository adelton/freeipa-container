name: Build and test FreeIPA containers

on:
  push:
  workflow_dispatch:

jobs:
  build:
    name: Build image
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ fedora-38 ]
        docker: [ docker ]
    steps:
      - name: Install podman 4.*
        run: |
          sudo apt-get remove -y golang-github-containers-image \
          && sudo mkdir -p /etc/apt/keyrings \
          && curl -fsSL https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_$(lsb_release -rs)/Release.key \
            | gpg --dearmor \
            | sudo tee /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg > /dev/null \
          && echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg] \
            https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_$(lsb_release -rs)/ /" \
            | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list > /dev/null \
          && sudo apt-get update -y \
          && sudo apt-get install -y podman skopeo
        if: matrix.docker == 'podman'
      - uses: actions/checkout@v3
      - name: Separate git work tree with just the files needed for build
        run: git worktree add --no-checkout ../minimize-for-build
      - name: Populate with the Dockerfile
        run: cd ../minimize-for-build && git checkout HEAD Dockerfile.${{ matrix.os }}
      - name: Populate with files referenced from the Dockerfile
        run: cd ../minimize-for-build && awk '/^(ADD|COPY)/ { for (i = 2; i < NF; i++) print $i }' Dockerfile.${{ matrix.os }} | while read f ; do git checkout HEAD $f ; done
      - name: For RHEL builds, use entitlements
        if: ${{ startsWith(matrix.os, 'rhel-') }}
        uses: ./.github/actions/podman-entitlement
        with:
          org: ${{ secrets.REDHAT_ORG }}
          activationkey: ${{ secrets.REDHAT_ACTIVATIONKEY }}
      - name: Build image
        run: ${{ matrix.docker }} build -t localhost/freeipa-server:${{ matrix.os }} -f Dockerfile.${{ matrix.os }} ../minimize-for-build

      - name: Label the built image
        run: docker="${{ matrix.docker }}" ./ci/label-image.sh Dockerfile.${{ matrix.os }} localhost/freeipa-server:${{ matrix.os }} $( cd ../minimize-for-build && git write-tree ) "${{ github.server_url }}/${{ github.repository }}" "actions/runs/${{ github.run_id }}"
      - name: File issue if building image failed
        if: ${{ failure() && github.event_name == 'schedule' }}
        run: |
          curl -s '${{ github.api_url }}/repos/${{ github.repository }}/issues?labels=image-build-fail' | jq -r '.[0].state' | grep open \
          || curl -s -X POST \
            --url ${{ github.api_url }}/repos/${{ github.repository }}/issues \
            -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'Accept: application/vnd.github.v3+json' \
            -d '{
              "title": "Image build for ${{ matrix.os }} failed on '$( date -I )'",
              "body": "This issue was automatically created by GitHub Action\n\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}.\n",
              "labels": ["image-build-fail" ]
              }'
      - name: Check resulting labels
        run: |
          skopeo inspect docker-daemon:localhost/freeipa-server:${{ matrix.os }} | jq '.Labels'
          diff -u <( skopeo inspect docker://quay.io/freeipa/freeipa-server:${{ matrix.os }} | jq '.Labels' ) <( skopeo inspect docker-daemon:localhost/freeipa-server:${{ matrix.os }} | jq '.Labels' ) || true
        if: matrix.docker != 'podman'
      - name: Check resulting labels
        run: |
          skopeo inspect containers-storage:localhost/freeipa-server:${{ matrix.os }} | jq '.Labels'
          diff -u <( skopeo inspect docker://quay.io/freeipa/freeipa-server:${{ matrix.os }} | jq '.Labels' ) <( skopeo inspect containers-storage:localhost/freeipa-server:${{ matrix.os }} | jq '.Labels' ) || true
        if: matrix.docker == 'podman'
      - name: Create directory for artifacts
        run: mkdir freeipa-server-${{ matrix.os }}
      - name: Save image
        run: ${{ matrix.docker }} save localhost/freeipa-server:${{ matrix.os }} | gzip > freeipa-server-${{ matrix.os }}/freeipa-server-${{ matrix.os }}.tar.gz
      - name: For RHEL builds, encrypt the artifacts
        uses: ./.github/actions/encrypt-file
        if: ${{ startsWith(matrix.os, 'rhel-') }}
        with:
          file: freeipa-server-${{ matrix.os }}/freeipa-server-${{ matrix.os }}.tar.gz
          secret: ${{ secrets.UPLOAD_SECRET }}
      - uses: actions/upload-artifact@v3
        with:
          name: freeipa-server-${{ matrix.os }}
          path: freeipa-server-${{ matrix.os }}
          retention-days: 1

  test-docker:
    name: Run with docker
    runs-on: macos-latest
    needs: [ build ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: fedora-38
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/stock-docker.io
      - uses: ./.github/actions/docker-cgroups-ubuntu-22
      - uses: actions/download-artifact@v3
        with:
          name: freeipa-server-${{ matrix.os }}
      - name: Decrypt artifacts that were encrypted after build
        uses: ./.github/actions/decrypt-file
        if: ${{ startsWith(matrix.os, 'rhel-') }}
        with:
          file: freeipa-server-${{ matrix.os }}.tar.gz
          secret: ${{ secrets.UPLOAD_SECRET }}
      - name: Load image
        run: gunzip < freeipa-server-${{ matrix.os }}.tar.gz | docker load
      - name: Run master and replica
        run: readonly=${{ matrix.readonly }} ca=${{ matrix.ca }} seccomp=${{ matrix.seccomp }} replica=${{ matrix.replica }} tests/run-master-and-replica.sh localhost/freeipa-server:${{ matrix.os }}
      - name: Run partial tests
        if: ${{ failure() }}
        run: tests/run-partial-tests.sh Dockerfile.${{ matrix.os }}

